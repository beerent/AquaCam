#include <SPI.h>
#include <Ethernet.h>
#include <LiquidCrystal.h>
#include <OneWire.h>
#include <Wire.h>
#include "RTClib.h"

int pin[3];
String UUID[3];
int relayPower[2];

// on and off times for lights
int lightOn[2];
int lightOff[2];

// LCD
LiquidCrystal lcd(30, 31, 32, 33, 34, 35);
int LCDPage;
int lcdCursor[4];

OneWire ds(5); // Thermometer

RTC_DS1307 RTC; // Clock

// Ethernet
byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };
IPAddress ip(192,168,0,177);
IPAddress server(192,168,1,149); 
int port = 5677;
EthernetClient client;

// important values
int Time;
String prettyTime;

double Temp;
String prettyTemp;

/************* TOOLS **************/

String Double2String( double val, unsigned int precision){
// prints val with number of decimal places determine by precision
// NOTE: precision is 1 followed by the number of zeros for the desired number of decimial places
// example: printDouble( 3.1415, 100); // prints 3.14 (two decimal places)
    String num = "";
    num += (int(val));
    num += ".";
    unsigned int frac;
    if(val >= 0)
        frac = (val - int(val)) * precision;
    else
        frac = (int(val)- val ) * precision;
    num += frac;
    return num;
}

void print(String s) {
  Serial.println(s); 
}

// adds a pin to the arduino
// ID number, Pin number, OUTPUT/INPUT, LOW/HIGH, Device name
void addPin(int num, int p, int type, int pos, String name){
  pin[num] = p;
  if(type == 0) pinMode(pin[num], OUTPUT);
  else pinMode(pin[num], INPUT);
  if(pos == 0) digitalWrite(pin[num], LOW);
  else digitalWrite(pin[num], HIGH);  
  UUID[num] = name;
}

/*************** ETHERNET FUNCTIONS ******************/

// function called when Arduino needs to communicate with server
void serverConnect() {
  print("connecting to server...");
  if (client.connect(server, port)) {
    print("connected.");
  } 
  else {
    print("connection failed");
  }
}

void serverDisconnect(){
  client.stop();
}

// accepts a String pointer, simply reads input from the Server,
// and modifies the String input (essentially returning a String).
void readIn(String &input) {
  delay(1000); //FIX: delay to allow for server to send all of the bytes
  
  // if the client has bytes to read from the server
  if (client.available()) { 
    while(client.available()!= 0){
      input += (char)client.read(); 
    }
  }
}

/******** THERMOMETER FUNCTIONS ********/

//returns current temperature as a double
double getTemp() {
  byte i;
  byte present = 0;
  byte type_s;
  byte data[12];
  byte addr[8];
  float celsius, fahrenheit;
  
  if ( !ds.search(addr)) {
    ds.reset_search();
  }
 
  // the first ROM byte indicates which chip
  switch (addr[0]) {
    case 0x10:
      // or old DS1820
      type_s = 1;
      break;
    case 0x28:    
      type_s = 0;
      break;
    case 0x22:
      type_s = 0;
      break;
    default:
      Serial.println("Device is not a DS18x20 family device.");
  } 

  ds.reset();
  ds.select(addr);
  ds.write(0x44,1);         // start conversion, with parasite power on at the end
  
  //delay(1000);     // maybe 750ms is enough, maybe not
  // we might do a ds.depower() here, but the reset will take care of it.
  
  present = ds.reset();
  ds.select(addr);    
  ds.write(0xBE);         // Read Scratchpad

  for ( i = 0; i < 9; i++) {           // we need 9 bytes
    data[i] = ds.read();
  }

  // convert the data to actual temperature

  unsigned int raw = (data[1] << 8) | data[0];
  if (type_s) {
    raw = raw << 3; // 9 bit resolution default
    if (data[7] == 0x10) {
      // count remain gives full 12 bit resolution
      raw = (raw & 0xFFF0) + 12 - data[6];
    }
  } else {
    byte cfg = (data[4] & 0x60);
    if (cfg == 0x00) raw = raw << 3;  // 9 bit resolution, 93.75 ms
    else if (cfg == 0x20) raw = raw << 2; // 10 bit res, 187.5 ms
    else if (cfg == 0x40) raw = raw << 1; // 11 bit res, 375 ms
    // default is 12 bit resolution, 750 ms conversion time
  }
  celsius = (float)raw / 16.0;
  fahrenheit = celsius * 1.8 + 32.0;
  return fahrenheit;
}

void setTemp(){
  Temp = getTemp();
}

int checkTemp(){
  double t = getTemp();
  if(Temp != t){
    Temp = t;
    setTempPretty(t);
    return 1;
  }
  return 0;  
}

void setTempPretty(double temp){
  int t= (int)(temp*10);
  String temper = String(t).substring(0, 2);
  //print(temper);
  temper+=".";
  temper+=String(t).substring(2, 3);
  prettyTemp = temper; 
}

/******** TIME FUNCTIONS ********/
int getTime(){
  DateTime now = RTC.now();
  int h = now.hour();
  int m = now.minute();
  setTimePretty(h, m);
  return h*100 + m;
}

void setTime(){
  Time = getTime(); 
}

void setTimePretty(int h, int m){  
  if(h >= 13) h-= 12;
  String hour = String(h);
  String min = String(m);
  //if(hour.length() == 1) hour = "0" + hour;
  if(min.length() == 1) min = "0" + min;
  prettyTime = hour + ":" + min;
}

int checkTime(){
  int tempTime = getTime();
  if (tempTime < 2500 && Time != tempTime){
    Time = tempTime;
    return 1;
  }
  return 0;
}

/******** LIGHT FUNCTIONS ********/
int checkLights(){
  int lightChange = 0;
  int max = 2500;
  
  for(int i = 0; i < 2; i++){
    //high == off == 1
    if(((max + Time - lightOn[i]) % max) < ((max + lightOff[i] - lightOn[i]) % max)){
      // should be on/ low
      if(relayPower[i] != 1){
        digitalWrite(pin[i], LOW); 
        relayPower[i] = 1; 
        lightChange = 1;
      }
    }else{
      // should be off/ high
      if(relayPower[i] != 0){
        digitalWrite(pin[i], HIGH); 
        relayPower[i] = 0;
        lightChange = 1;
      }
    }
  }
  return lightChange;
}

void setLightTimes(){
  lightOn[0] = 0004; lightOff[0] = 2200;
  lightOn[1] = 1430; lightOff[1] = 2230;
}

void setup(){
    
  //initialize Serial
  Serial.begin(9600);
  
  // set light pins
  addPin(0, 22, 0, 1, "Light 1");
  addPin(1, 23, 0, 1, "Light 2");
  relayPower[0] = -1; 
  relayPower[1] = -1;
  
  // thermometer pin initialization
  pin[2] = A0;
  pinMode(pin[2], INPUT);
  digitalWrite(pin[2], HIGH);

  //set lights
  setLightTimes();
  
  //initialize LCD
  lcd.begin(20, 4);
  initLCD();
  Wire.begin();
  RTC.begin();
  Time = -1;
  Temp = -1;
  //initialize ethernet connection
  if (Ethernet.begin(mac) == 0) {
    print("Failed to configure Ethernet using DHCP");
    Ethernet.begin(mac, ip);
  }
}

/******** LCD FUNCTIONS ********/

void initLCD(){
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Light 1: ");
  lcdCursor[0] = 9;

  lcd.setCursor(0,1);  
  lcd.print("Light 2: ");
  lcdCursor[1] = 9;

  lcd.setCursor(0,2);
  lcd.print("Temp: ");
  lcdCursor[2] = 6;

  lcdCursor[3] = 0;
}

void updateLCD(int time, int lights, int temp){
  if(time == 1){
    //change time on lcd
    print("updating TIME: " + prettyTime);
    clearLCDLine(lcdCursor[3], 3);
    lcd.setCursor(lcdCursor[3], 3);
    lcd.print(prettyTime);
  }

  if(lights == 1){
    //iterate through 2 rows
    for(int i = 0; i < 2; i++){
      clearLCDLine(lcdCursor[i], i);
      lcd.setCursor(lcdCursor[i], i);
      if(relayPower[i] == 1){
        lcd.print("ON");
        print("updating LIGHT " + String(i) + " ON");
      }else{
        lcd.print("OFF");
        print("updating LIGHT " + String(i) + " OFF");
      }
    }
  }

  if(temp == 1){
    print("updating TEMP: " + prettyTemp);
    //change temp on lcd
    clearLCDLine(lcdCursor[2], 2);
    lcd.setCursor(lcdCursor[2], 2);
    lcd.print(prettyTemp);
  }
}

void clearLCDLine(int x, int y){
  lcd.setCursor(x, y);
  for(int i = 0; i < 20-x; i++){
    lcd.print(" ");
  }
}

/**************************************************/

void uniReq(){
  char out[50];
  String data;
  
  print(String(Time));
  print(Double2String(Temp, 10));

  inputRequest(1, 0, -1);
  inputRequest(0, 1, 0);
  inputRequest(0, 1, 1);
  //inputRequest();
  
  print("uni complete.");
}

void inputRequest(int temp, int lights, int light){
  char cmd[50];
  if(temp == 1){
    sprintf(cmd, "1 \"%d\" \"tank1\" \"%d\"", Time, ((int)(Temp*10)));  
  }else if(lights == 1){
    
    char pwr;
    if(relayPower[light] == 1){
      pwr = 'Y';
    }else{
      pwr = 'N';
    }
    
    sprintf(cmd, "2 \"%d\" \"%c\" \"tank1\" \"riley\" \"%d\"", light, pwr, Time);
  }else{
    sprintf(cmd, "%d", -1); 
  }
  client.print(cmd);
  String data;
  readIn(data);
}

void dataSend(int temp, int lights){
  serverConnect();
  String data;
  
  readIn(data); //receive hello
  print(data);
  data = "";
  client.print("A"); //send identifier
  
  readIn(data);
  if(data == "2"){
    uniReq();
  }else if(data == "1"){
    if(temp == 1) inputRequest(1, 0, -1);
    if(lights == 1){
      inputRequest(0, 1, 0);
      inputRequest(0, 1, 1);
    } else inputRequest(0, 0, -1);
  }   
    
  client.print("1"); 
  serverDisconnect();
}

void loop(){
  int time = checkTime();
  int temp = checkTemp();
  int lights = checkLights();
  
  if((time + temp + lights)> 0)
    updateLCD(time, lights, temp);
    
  
  dataSend(temp, lights);
  delay(2000);
}

#include <SPI.h>
#include <Ethernet.h>
#include <LiquidCrystal.h>
#include <OneWire.h>
#include <Wire.h>
#include "RTClib.h"
/*
 * circuit:
 * LCD RS (4) | digital pin 30
 * LCD Enable pin (6) | digital pin 31
 * LCD D4 pin to digital pin 32
 * LCD D5 pin to digital pin 33
 * LCD D6 pin to digital pin 34
 * LCD D7 pin to digital pin 35
 * LCD R/W (5) | ground
 * 10K resistor:
 * ends to +5V and ground
 * wiper to LCD VO pin (pin 3)
 */

int pin[3];
String UUID[3];
int relayPower[2];

// on and off times for lights
int lightOn[2];
int lightOff[2];

// LCD
LiquidCrystal lcd(30, 31, 32, 33, 34, 35);
int LCDPage;
int lcdCursor[4];

OneWire ds(5); // Thermometer

RTC_DS1307 RTC; // Clock

// Ethernet
byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };
IPAddress ip(192,168,0,177);
IPAddress server(192,168,1,149); 
int port = 5678;
EthernetClient client;


// important values
int Time;
double Temp;

void print(String s) {
  Serial.println(s); 
}

String Double2String( double val, unsigned int precision){
// prints val with number of decimal places determine by precision
// NOTE: precision is 1 followed by the number of zeros for the desired number of decimial places
// example: printDouble( 3.1415, 100); // prints 3.14 (two decimal places)
    String num = "";
    num += (int(val));
    num += ".";
    unsigned int frac;
    if(val >= 0)
        frac = (val - int(val)) * precision;
    else
        frac = (int(val)- val ) * precision;
    num += frac;
    return num;
}

/***********ETHERNET FUNCTIONS******************/

// function called when Arduino needs to communicate with server
void serverConnect() {
  print("connecting to server...");
  if (client.connect(server, port)) {
    print("connected.");
  } 
  else {
    print("connection failed");
  }
}

void serverDisconnect(){
  client.stop();
}

// accepts a String pointer, simply reads input from the Server,
// and modifies the String input (essentially returning a String).
void readIn(String &input) {
  delay(1000); //FIX: delay to allow for server to send all of the bytes
  
  // if the client has bytes to read from the server
  if (client.available()) { 
    while(client.available()!= 0){
      input += (char)client.read(); 
    }
  }
}

/***********DATABSE FUNCTIONS******************/

void insertSQL(int op, int light){
  serverConnect();
  char sender[50];
  if(op == 1){
    int t = (int)(10 * Temp);
    sprintf(sender, "1 \"%d\" \"tank1\" \"%d\"", Time, t);
  }else if(op == 2){ 
    char pwr;
    if(relayPower[light] == 1){
      pwr = 'Y';
    }else{
      pwr = 'N';
    }
    sprintf(sender, "2 \"%d\" \"%d\" \"%c\" \"tank1\"", light, Time, pwr);
  }
  print(sender);
  client.println(sender);
  serverDisconnect();
}

void setLightTimes(){
  lightOn[0] = 1400; lightOff[0] = 2200;
  lightOn[1] = 1430; lightOff[1] = 2230;
}

//returns current temperature as a double
double getTemperature() {
  byte i;
  byte present = 0;
  byte type_s;
  byte data[12];
  byte addr[8];
  float celsius, fahrenheit;
  
  if ( !ds.search(addr)) {
    ds.reset_search();
  }
 
  // the first ROM byte indicates which chip
  switch (addr[0]) {
    case 0x10:
      // or old DS1820
      type_s = 1;
      break;
    case 0x28:    
      type_s = 0;
      break;
    case 0x22:
      type_s = 0;
      break;
    default:
      Serial.println("Device is not a DS18x20 family device.");
  } 

  ds.reset();
  ds.select(addr);
  ds.write(0x44,1);         // start conversion, with parasite power on at the end
  
  //delay(1000);     // maybe 750ms is enough, maybe not
  // we might do a ds.depower() here, but the reset will take care of it.
  
  present = ds.reset();
  ds.select(addr);    
  ds.write(0xBE);         // Read Scratchpad

  for ( i = 0; i < 9; i++) {           // we need 9 bytes
    data[i] = ds.read();
  }

  // convert the data to actual temperature

  unsigned int raw = (data[1] << 8) | data[0];
  if (type_s) {
    raw = raw << 3; // 9 bit resolution default
    if (data[7] == 0x10) {
      // count remain gives full 12 bit resolution
      raw = (raw & 0xFFF0) + 12 - data[6];
    }
  } else {
    byte cfg = (data[4] & 0x60);
    if (cfg == 0x00) raw = raw << 3;  // 9 bit resolution, 93.75 ms
    else if (cfg == 0x20) raw = raw << 2; // 10 bit res, 187.5 ms
    else if (cfg == 0x40) raw = raw << 1; // 11 bit res, 375 ms
    // default is 12 bit resolution, 750 ms conversion time
  }
  celsius = (float)raw / 16.0;
  fahrenheit = celsius * 1.8 + 32.0;
  return fahrenheit;
}

// returns 1 if time global var is changed
int checkTime(){  
  DateTime now = RTC.now();  
  int currentTime = now.hour()*100 + now.minute();

  if((currentTime < 2400) && (currentTime != Time)){
    Time = currentTime;
    return 1;
  }
  return 0;
}

String getTimeString(){
  String t = String(Time);
  int h = t.substring(0, 2).toInt();
  int m = t.substring(2).toInt();
  if(h > 12) h = h-12;
  return String(h) + ":" + String(m);
   
}

// returns 1 if lights have changed
int checkLights(){
  int lightChange = 0;
  int max = 2500;
  
  for(int i = 0; i < 2; i++){
    //high == off == 1
    if(((max + Time - lightOn[i]) % max) < ((max + lightOff[i] - lightOn[i]) % max)){
      // should be on/ low
      if(relayPower[i] != 1){
        digitalWrite(pin[i], LOW); 
        relayPower[i] = 1; 
        lightChange = 1;
        insertSQL(2, i);
      }
    }else{
      // should be off/ high
      if(relayPower[i] != 0){
        digitalWrite(pin[i], HIGH); 
        relayPower[i] = 0;
        lightChange = 1;
        insertSQL(2, i);
      }
    }
  }
  return lightChange;
}

// returns 1 if temperature has changed
int checkTemperature(){
  double tempTemp = getTemperature();
  if (tempTemp != Temp){
    Temp = tempTemp;
    insertSQL(1, -1);
    return 1;
  }
  return 0;
}

//sets up the 
void initLCD(){
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Light 1: ");
  lcdCursor[0] = 9;

  lcd.setCursor(0,1);  
  lcd.print("Light 2: ");
  lcdCursor[1] = 9;

  lcd.setCursor(0,2);
  lcd.print("Temp: ");
  lcdCursor[2] = 6;

  lcdCursor[3] = 0;
}

void clearLCDLine(int x, int y){
  lcd.setCursor(x, y);
  for(int i = 0; i < 20-x; i++){
    lcd.print(" ");;
  }
}

void updateLCD(int time, int lights, int temp){
  if(time == 1){
    //change time on lcd
    String t = getTimeString();
    print("updating TIME: " + t);
    clearLCDLine(lcdCursor[3], 3);
    lcd.setCursor(lcdCursor[3], 3);
    lcd.print(t);
  }

  if(lights == 1){
    //iterate through 2 rows
    for(int i = 0; i < 2; i++){
      clearLCDLine(lcdCursor[i], i);
      lcd.setCursor(lcdCursor[i], i);
      if(relayPower[i] == 1){
        lcd.print("ON");
        print("updating LIGHT " + String(i) + " ON");
      }else{
        lcd.print("OFF");
        print("updating LIGHT " + String(i) + " OFF");
      }
    }
  }

  if(temp == 1){
    print("updating TEMP: " + Double2String(Temp, 10));
    //change temp on lcd
    clearLCDLine(lcdCursor[2], 2);
    lcd.setCursor(lcdCursor[2], 2);
    lcd.print(Double2String(Temp, 10));
  }
}

// adds a pin to the arduino
// ID number, Pin number, OUTPUT/INPUT, LOW/HIGH, Device name
void addPin(int num, int p, int type, int pos, String name){
  pin[num] = p;
  if(type == 0) pinMode(pin[num], OUTPUT);
  else pinMode(pin[num], INPUT);
  if(pos == 0) digitalWrite(pin[num], LOW);
  else digitalWrite(pin[num], HIGH);  
  UUID[num] = name;
}

void setup(){
    
  //initialize Serial
  Serial.begin(9600);
  
  // set light pins
  addPin(0, 22, 0, 1, "Light 1");
  addPin(1, 23, 0, 1, "Light 2");
  relayPower[0] = -1; 
  relayPower[1] = -1;
  
  // thermometer pin initialization
  pin[2] = A0;
  pinMode(pin[2], INPUT);
  digitalWrite(pin[2], HIGH);

  //set lights
  setLightTimes();
  
  //initialize LCD
  lcd.begin(20, 4);
  initLCD();
  Wire.begin();
  RTC.begin();

  //initialize ethernet connection
  if (Ethernet.begin(mac) == 0) {
    print("Failed to configure Ethernet using DHCP");
    Ethernet.begin(mac, ip);
  }

  Time = -1;
  Temp = -1;
}

void loop(){
  /* GET INFORMATION */
  int newTime = checkTime();
  int newLights = checkLights();
  int newTemp = checkTemperature();
  
  /* CHECK TO UPDATE LCD */
  if ((newTime + newLights + newTemp) > 0){
    updateLCD(newTime, newLights, newTemp);
  }
  /*
  - insert temp
  - insert time
  */
}
#include <SPI.h>
#include <Ethernet.h>
#include <LiquidCrystal.h>
#include <OneWire.h>
#include <Wire.h>
#include "RTClib.h"


/*
 * --ARC--

 * circuit:
 * LCD RS (4) | digital pin 30
 * LCD Enable pin (6) | digital pin 31
 * LCD D4 pin to digital pin 32
 * LCD D5 pin to digital pin 33
 * LCD D6 pin to digital pin 34
 * LCD D7 pin to digital pin 35
 * LCD R/W (5) | ground
 * 10K resistor:
 * ends to +5V and ground
 * wiper to LCD VO pin (pin 3)
 */
 
 /*pins:
  * 0: light1
  * 1: light2
  */

int pin[3];
String UUID[2];

byte mac[] = {0x90, 0xA2, 0xDA, 0x0E, 0x40, 0x9F};
byte ip[] = {192, 168, 2, 172};
IPAddress server(192,168,2,6);
int port = 5678;
EthernetClient client;
int connected;

int relayCount = 2;
int relay[2];

// on and off times for lights
int lightOn[2];
int lightOff[2];
int lightOveride;

LiquidCrystal lcd(30, 31, 32, 33, 34, 35);
int LCDPage;

OneWire ds(5);

RTC_DS1307 RTC;

void print(String s) {
  Serial.println(s); 
}

/**********ARDUINO FUNCTIONS***********/

// accepts the current time in military time as two parameters
// turns on/off any devices that use a relay, if they need
// to be turned on/off. 
void relayTimer(int currentTime){
  int max = 2500;
  for(int i = 0; i < relayCount; i++){
    if(((max + currentTime - lightOn[i]) % max) < ((max + lightOff[i] - lightOn[i]) % max)){
      if(relay[i] == 0){
        digitalWrite(pin[i], LOW);
        relay[i] = 1;
        print("pin " + String(i) + " launched");
      }
    }else{
      if(relay[i] == 1){ //if we have to...
        digitalWrite(pin[i], HIGH);
        relay[i] = 0;
        print("pin " + String(i) + " blogged off");
      }
    }
  }
  
}

void lightManager(){
  DateTime now = RTC.now();
  
  int currentTime = now.hour()*100 + now.minute();
  print(String(currentTime));
  relayTimer(currentTime);
}

void setLightTimes(){
  lightOn[0] = 1400; lightOff[0] = 2200;
  lightOn[1] = 1500; lightOff[1] = 2300;
}

// adds a pin to the arduino
// ID number, Pin number, OUTPUT/INPUT, LOW/HIGH, Device name
void addPin(int num, int p, int type, int pos, String name){
  pin[num] = p;
  if(type == 0) pinMode(pin[num], OUTPUT);
  else pinMode(pin[num], INPUT);
  if(pos == 0) digitalWrite(pin[num], LOW);
  else digitalWrite(pin[num], HIGH);  
  UUID[num] = name;
}

void reportLCD(){ 
  String line [4];
  
  switch (LCDPage) {
    case 1:
      lcd.clear();
      break;
    default:
      for(int i = 0; i < 2; i++){
        if(relay[i] == 0){
          line[i] = ("Light " + String(i+1) + ": OFF"); 
        }else{
          line[i] = ("Light " + String(i+1) + ": ON "); 
        }
      }
  }
      
      
  line[2] = "Temperature: " + Double2String(getTemperature(), 10);
  print(getTimeString());
  line[3] = getTimeString();
  
  lcd.clear();
  for (int i = 0; i < 4; i++){
    lcd.setCursor(0, i); 
    lcd.print(line[i]);
  }
} 

//returns current temperature as an int
double getTemperature() {
  byte i;
  byte present = 0;
  byte type_s;
  byte data[12];
  byte addr[8];
  float celsius, fahrenheit;
  
  if ( !ds.search(addr)) {
    ds.reset_search();
  }
 
  // the first ROM byte indicates which chip
  switch (addr[0]) {
    case 0x10:
      // or old DS1820
      type_s = 1;
      break;
    case 0x28:    
      type_s = 0;
      break;
    case 0x22:
      type_s = 0;
      break;
    default:
      Serial.println("Device is not a DS18x20 family device.");
  } 

  ds.reset();
  ds.select(addr);
  ds.write(0x44,1);         // start conversion, with parasite power on at the end
  
  delay(1000);     // maybe 750ms is enough, maybe not
  // we might do a ds.depower() here, but the reset will take care of it.
  
  present = ds.reset();
  ds.select(addr);    
  ds.write(0xBE);         // Read Scratchpad

  for ( i = 0; i < 9; i++) {           // we need 9 bytes
    data[i] = ds.read();
  }

  // convert the data to actual temperature

  unsigned int raw = (data[1] << 8) | data[0];
  if (type_s) {
    raw = raw << 3; // 9 bit resolution default
    if (data[7] == 0x10) {
      // count remain gives full 12 bit resolution
      raw = (raw & 0xFFF0) + 12 - data[6];
    }
  } else {
    byte cfg = (data[4] & 0x60);
    if (cfg == 0x00) raw = raw << 3;  // 9 bit resolution, 93.75 ms
    else if (cfg == 0x20) raw = raw << 2; // 10 bit res, 187.5 ms
    else if (cfg == 0x40) raw = raw << 1; // 11 bit res, 375 ms
    // default is 12 bit resolution, 750 ms conversion time
  }
  celsius = (float)raw / 16.0;
  fahrenheit = celsius * 1.8 + 32.0;
  Serial.print("  Temperature = ");
  Serial.print(fahrenheit);
  Serial.println(" Fahrenheit");
  return fahrenheit;
}

//returns a String containing the time
String getTimeString() {
  String m = "A.M.";
  DateTime now = RTC.now();
  int hour = now.hour();
  int minute = now.minute();
  
  
  return (String(now.hour()) + ":" + String(now.minute()) + m); 
}

void setup() {  
    
  //initialize Serial
  Serial.begin(9600);
  // set light pins
  addPin(0, 22, 0, 1, "Light 1");
  relay[0] = 0; 
  addPin(1, 23, 0, 1, "Light 2");
  relay[1] = 0;
  

  pin[2] = A0; //i believe A0 is 54
  pinMode(pin[2], INPUT);
  digitalWrite(pin[2], HIGH);

  //set lights
  relayCount = 2;
  setLightTimes();
  lightOveride = 0;
  
  //initialize LCD

  lcd.begin(20, 4);

  LCDPage = 0; //main page
  
  Wire.begin();
  RTC.begin();
  RTC.adjust(DateTime(__DATE__, __TIME__));
  /*
  //initialize ethernet connection
  if (Ethernet.begin(mac) == 0) {
    print("Failed to configure Ethernet using DHCP");
    Ethernet.begin(mac, ip);
  }
  */
  connected = 0;
}

String Double2String( double val, unsigned int precision){
// prints val with number of decimal places determine by precision
// NOTE: precision is 1 followed by the number of zeros for the desired number of decimial places
// example: printDouble( 3.1415, 100); // prints 3.14 (two decimal places)
    String num = "";
    num += (int(val));
    num += ".";
    unsigned int frac;
    if(val >= 0)
        frac = (val - int(val)) * precision;
    else
        frac = (int(val)- val ) * precision;
    num += frac;
    return num;
}

void loop() {
  lightManager();
  reportLCD();
}
